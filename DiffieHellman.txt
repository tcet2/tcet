import java.math.BigInteger;
import java.util.Random;

public class DiffieHellman {

    public static void main(String[] args) {
        Random rand = new Random();

        // Step 1: Publicly shared prime numbers
        BigInteger p = BigInteger.probablePrime(8, rand); // prime number
        BigInteger g = new BigInteger("5"); // primitive root (usually small)

        System.out.println("Publicly shared values:\np = " + p + "\ng = " + g);

        // Step 2: Alice chooses a private key 'a'
        BigInteger a = new BigInteger(8, rand); // Alice's private key
        BigInteger A = g.modPow(a, p); // A = g^a mod p
        System.out.println("Alice sends A = " + A);

        // Step 3: Bob chooses a private key 'b'
        BigInteger b = new BigInteger(8, rand); // Bob's private key
        BigInteger B = g.modPow(b, p); // B = g^b mod p
        System.out.println("Bob sends B = " + B);

        // Step 4: Both compute shared secret key
        BigInteger secretKeyA = B.modPow(a, p); // (B^a mod p)
        BigInteger secretKeyB = A.modPow(b, p); // (A^b mod p)

        System.out.println("Shared secret key at Alice's side: " + secretKeyA);
        System.out.println("Shared secret key at Bob's side: " + secretKeyB);
    }
}
