import java.util.*;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

class User {
    String username;
    String hashedPassword;
    String role;
    int loginAttempts;
    boolean locked;

    User(String username, String password, String role) {
        this.username = username;
        this.hashedPassword = hashPassword(password);
        this.role = role;
        this.loginAttempts = 0;
        this.locked = false;
    }

    private String hashPassword(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] bytes = md.digest(password.getBytes());
            StringBuilder sb = new StringBuilder();
            for (byte b : bytes) {
                sb.append(String.format("%02x", b));
            }
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }

    public boolean checkPassword(String password) {
        return this.hashedPassword.equals(hashPassword(password));
    }
}

public class SecureAuthSystem {
    private static final Map<String, User> users = new HashMap<>();
    private static final Scanner scanner = new Scanner(System.in);
    private static final Random random = new Random();

    public static void main(String[] args) {
        // Adding dummy users (In real app, this would come from DB)
        users.put("admin", new User("admin", "Admin@123", "admin"));
        users.put("operator", new User("operator", "Op@456", "user"));

        System.out.println("=== Secure Authentication System ===");

        System.out.print("Enter username: ");
        String username = scanner.nextLine();

        if (!users.containsKey(username)) {
            System.out.println("‚ùå User not found!");
            return;
        }

        User user = users.get(username);

        if (user.locked) {
            System.out.println("‚ùå Account is locked due to multiple failed login attempts.");
            return;
        }

        System.out.print("Enter password: ");
        String password = scanner.nextLine();

        if (!user.checkPassword(password)) {
            user.loginAttempts++;
            System.out.println("‚ùå Incorrect password. Attempts: " + user.loginAttempts);
            if (user.loginAttempts >= 3) {
                user.locked = true;
                System.out.println("üö´ Account locked due to too many failed attempts.");
            }
            return;
        }

        // Password correct
        user.loginAttempts = 0;

        // Step 2: OTP Simulation
        int otp = 100000 + random.nextInt(900000);
        System.out.println("üîê Your OTP is: " + otp);  // Simulate sending to device
        System.out.print("Enter OTP: ");
        int inputOtp = scanner.nextInt();

        if (inputOtp != otp) {
            System.out.println("‚ùå Invalid OTP. Authentication failed.");
            return;
        }

        System.out.println("‚úÖ Authentication Successful!");

        // Step 3: Role-based Access
        if (user.role.equals("admin")) {
            System.out.println("üëë Welcome Admin! You have full control.");
        } else {
            System.out.println("üë§ Welcome User! Limited access granted.");
        }
    }
}
