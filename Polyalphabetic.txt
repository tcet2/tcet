public class PolyalphabeticCipher {

    // Encrypt the plaintext using the key
    public static String encrypt(String plaintext, String key) {
        StringBuilder result = new StringBuilder();
        key = key.toLowerCase();

        for (int i = 0, j = 0; i < plaintext.length(); i++) {
            char c = plaintext.charAt(i);

            if (Character.isLetter(c)) {
                char base = Character.isUpperCase(c) ? 'A' : 'a';
                int shift = key.charAt(j % key.length()) - 'a';
                char encryptedChar = (char) ((c - base + shift) % 26 + base);
                result.append(encryptedChar);
                j++;
            } else {
                result.append(c); // Non-letters unchanged
            }
        }

        return result.toString();
    }

    // Decrypt the ciphertext using the key
    public static String decrypt(String ciphertext, String key) {
        StringBuilder result = new StringBuilder();
        key = key.toLowerCase();

        for (int i = 0, j = 0; i < ciphertext.length(); i++) {
            char c = ciphertext.charAt(i);

            if (Character.isLetter(c)) {
                char base = Character.isUpperCase(c) ? 'A' : 'a';
                int shift = key.charAt(j % key.length()) - 'a';
                char decryptedChar = (char) ((c - base - shift + 26) % 26 + base);
                result.append(decryptedChar);
                j++;
            } else {
                result.append(c); // Non-letters unchanged
            }
        }

        return result.toString();
    }

    public static void main(String[] args) {
        String message = "AttackAtDawn";
        String keyword = "key";

        String encrypted = encrypt(message, keyword);
        System.out.println("Encrypted: " + encrypted);

        String decrypted = decrypt(encrypted, keyword);
        System.out.println("Decrypted: " + decrypted);
    }
}
